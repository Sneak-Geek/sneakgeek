platform :ios do
	desc "Fastlane for iOS"
	xcproj = "./ios/app.xcodeproj"

	lane :bump_version_number do
	  increment_version_number_in_xcodeproj(
      version_number: ENV["IOS_VERSION_NUMBER"],
      xcodeproj: xcproj,
      scheme: ENV["CI_SCHEME"],
      omit_zero_patch_version: false
    )
    end
      
	lane :bump_build_number do
	  increment_build_number(
		  xcodeproj: xcproj,
		  build_number: ENV["IOS_BUILD_NUMBER"]
	  )
	end

  lane :staging_code_sign_setup do
    # Setup for CI
    setup_ci()

    # Setup provisioning profiles and certificates
	  match(
	    type: "adhoc", 
	    app_identifier: "app.sneakgeek.mobile.staging", 
	    username: "huyhoang.pham95@gmail.com", 
	    team_id: "VVPX9A83PB",
		  git_basic_authorization: Base64.encode64("hoangpham95:" + ENV["GIT_PERSONAL_ACCESS_TOKEN"]),
	  )
	  update_code_signing_settings(
      use_automatic_signing: false,
      path: xcproj,
      code_sign_identity: "iPhone Distribution",
      bundle_identifier: "app.sneakgeek.mobile.staging",
      profile_name: "match AdHoc app.sneakgeek.mobile.staging",
    )
  end

	lane :archive_staging do
	  cocoapods(
      use_bundle_exec: false,
	    clean_install: true,
	    podfile: "./ios/Podfile"
	  )

    # Setup app_store_connect_api_key
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APPSTORE_CONNECT_ISSUER_ID"],
      key_filepath: "./fastlane/AuthKey_T3JM22TFR3.p8",
      in_house: false
    )

    # Code sign for staging
	  staging_code_sign_setup()
    
    # Build
	  gym(
	    workspace: "ios/app.xcworkspace",
	    scheme: ENV["CI_SCHEME"],
      configuration: "Release",
	    clean: true,
	    derived_data_path: "ios/build/staging",
	    output_directory: "ios/build/staging",
	    export_method: "ad-hoc",
      xcargs: "-allowProvisioningUpdates",
      silent: true,
      include_bitcode: false,
      export_options: {
        uploadBitcode: false,
        uploadSymbols: true,
        compileBitcode: false,
      }
    )
    update_code_signing_settings(
      use_automatic_signing: true,
      path: xcproj,
    )
	end
  
  lane :distribute_staging_app_center do 
		appcenter_upload(
			api_token: ENV["APP_CENTER_API_TOKEN"],
			owner_name: "SneakGeek",
			owner_type: "organization",
			app_name: "sneakgeek",
			file: "ios/build/staging/SneakGeek.ipa",
      notify_testers: true
		)
  end

  lane :add_device do
    register_devices(
      devices_file: "./devices.txt",
      team_id: "VVPX9A83PB",
      username: "huyhoang.pham95@gmail.com"
    )
  end

  lane :archive_prod do
    # Install pods
	  cocoapods(
      use_bundle_exec: false,
	    clean_install: true,
	    podfile: "./ios/Podfile"
	  )
    # Setup app_store_connect_api_key
    app_store_connect_api_key(
      key_id: ENV["APPSTORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APPSTORE_CONNECT_ISSUER_ID"],
      key_filepath: "./fastlane/AuthKey_T3JM22TFR3.p8",
      in_house: false
    )
    setup_ci()
	  # Setup provisioning profiles and certificates
	  match(
	    type: "appstore", 
	    app_identifier: "app.sneakgeek.mobile.prod", 
	    username: "huyhoang.pham95@gmail.com", 
	    team_id: "VVPX9A83PB",
		  git_basic_authorization: ENV["GIT_BASIC_AUTH"],
	  )
	  update_code_signing_settings(
      use_automatic_signing: false,
      path: xcproj,
      code_sign_identity: "iPhone Distribution",
      bundle_identifier: "app.sneakgeek.mobile.prod",
      profile_name: "match AppStore app.sneakgeek.mobile.prod",
    )
    # Build
	  gym(
	    workspace: "ios/app.xcworkspace",
	    scheme: ENV["CI_SCHEME"],
      configuration: "Release",
	    clean: true,
	    derived_data_path: "ios/build/prod",
	    output_directory: "ios/build/prod",
	    export_method: "app-store",
      xcargs: "-allowProvisioningUpdates",
      silent: true,
      include_bitcode: false,
      export_options: {
        uploadBitcode: false,
        uploadSymbols: true,
        compileBitcode: false,
      }
    )
    update_code_signing_settings(
      use_automatic_signing: true,
      path: xcproj,
    )
	end

  lane :upload_testflight do
    upload_to_testflight(
      skip_submission: true,
      ipa: "./ios/build/prod/SneakGeek.ipa",
    )
  end
end